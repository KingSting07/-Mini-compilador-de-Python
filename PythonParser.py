# Generated from PythonParser.g4 by ANTLR 4.13.2
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,123,884,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,1,0,5,0,20,8,0,10,0,12,0,23,9,0,1,0,1,0,1,1,
        5,1,28,8,1,10,1,12,1,31,9,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        1,1,1,1,1,1,1,1,3,1,46,8,1,1,1,3,1,49,8,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,5,2,59,8,2,10,2,12,2,62,9,2,1,2,1,2,5,2,66,8,2,10,2,12,
        2,69,9,2,1,2,1,2,3,2,73,8,2,1,2,5,2,76,8,2,10,2,12,2,79,9,2,1,2,
        1,2,5,2,83,8,2,10,2,12,2,86,9,2,1,2,1,2,3,2,90,8,2,1,2,5,2,93,8,
        2,10,2,12,2,96,9,2,5,2,98,8,2,10,2,12,2,101,9,2,1,2,5,2,104,8,2,
        10,2,12,2,107,9,2,1,2,1,2,5,2,111,8,2,10,2,12,2,114,9,2,1,2,1,2,
        5,2,118,8,2,10,2,12,2,121,9,2,1,2,5,2,124,8,2,10,2,12,2,127,9,2,
        1,2,5,2,130,8,2,10,2,12,2,133,9,2,1,2,1,2,1,3,1,3,1,3,1,3,3,3,141,
        8,3,1,3,5,3,144,8,3,10,3,12,3,147,9,3,1,3,1,3,1,3,1,3,3,3,153,8,
        3,4,3,155,8,3,11,3,12,3,156,1,4,1,4,1,4,4,4,162,8,4,11,4,12,4,163,
        1,4,1,4,5,4,168,8,4,10,4,12,4,171,9,4,1,4,1,4,1,4,5,4,176,8,4,10,
        4,12,4,179,9,4,1,4,4,4,182,8,4,11,4,12,4,183,1,4,1,4,5,4,188,8,4,
        10,4,12,4,191,9,4,1,4,1,4,5,4,195,8,4,10,4,12,4,198,9,4,1,4,1,4,
        5,4,202,8,4,10,4,12,4,205,9,4,1,4,1,4,5,4,209,8,4,10,4,12,4,212,
        9,4,1,4,1,4,1,4,5,4,217,8,4,10,4,12,4,220,9,4,1,4,1,4,4,4,224,8,
        4,11,4,12,4,225,1,4,1,4,5,4,230,8,4,10,4,12,4,233,9,4,1,4,1,4,5,
        4,237,8,4,10,4,12,4,240,9,4,1,4,1,4,5,4,244,8,4,10,4,12,4,247,9,
        4,1,4,5,4,250,8,4,10,4,12,4,253,9,4,5,4,255,8,4,10,4,12,4,258,9,
        4,1,4,1,4,5,4,262,8,4,10,4,12,4,265,9,4,1,4,1,4,5,4,269,8,4,10,4,
        12,4,272,9,4,1,4,1,4,5,4,276,8,4,10,4,12,4,279,9,4,1,4,5,4,282,8,
        4,10,4,12,4,285,9,4,1,5,1,5,1,5,1,5,5,5,291,8,5,10,5,12,5,294,9,
        5,1,5,1,5,1,5,1,5,5,5,300,8,5,10,5,12,5,303,9,5,1,5,1,5,5,5,307,
        8,5,10,5,12,5,310,9,5,1,5,1,5,1,5,5,5,315,8,5,10,5,12,5,318,9,5,
        1,5,4,5,321,8,5,11,5,12,5,322,1,5,5,5,326,8,5,10,5,12,5,329,9,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,
        346,8,6,10,6,12,6,349,9,6,1,6,1,6,1,6,1,6,1,6,1,6,5,6,357,8,6,10,
        6,12,6,360,9,6,1,6,1,6,3,6,364,8,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,5,6,551,8,6,10,6,12,6,554,9,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,5,7,566,8,7,10,7,12,7,569,9,7,1,7,1,7,1,7,1,7,1,7,1,
        7,5,7,577,8,7,10,7,12,7,580,9,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,3,7,682,8,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,5,7,853,8,7,10,7,12,7,856,9,7,1,
        8,1,8,1,8,1,8,1,8,5,8,863,8,8,10,8,12,8,866,9,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,5,8,875,8,8,10,8,12,8,878,9,8,1,8,1,8,3,8,882,8,8,1,
        8,0,3,8,12,14,9,0,2,4,6,8,10,12,14,16,0,2,2,0,2,2,10,10,1,0,1,2,
        1055,0,21,1,0,0,0,2,29,1,0,0,0,4,50,1,0,0,0,6,136,1,0,0,0,8,158,
        1,0,0,0,10,286,1,0,0,0,12,363,1,0,0,0,14,681,1,0,0,0,16,881,1,0,
        0,0,18,20,3,2,1,0,19,18,1,0,0,0,20,23,1,0,0,0,21,19,1,0,0,0,21,22,
        1,0,0,0,22,24,1,0,0,0,23,21,1,0,0,0,24,25,5,0,0,1,25,1,1,0,0,0,26,
        28,5,1,0,0,27,26,1,0,0,0,28,31,1,0,0,0,29,27,1,0,0,0,29,30,1,0,0,
        0,30,45,1,0,0,0,31,29,1,0,0,0,32,33,5,118,0,0,33,34,5,8,0,0,34,46,
        3,14,7,0,35,46,3,14,7,0,36,37,5,118,0,0,37,38,5,8,0,0,38,46,3,12,
        6,0,39,46,3,12,6,0,40,46,5,2,0,0,41,46,3,6,3,0,42,46,3,8,4,0,43,
        46,3,4,2,0,44,46,3,10,5,0,45,32,1,0,0,0,45,35,1,0,0,0,45,36,1,0,
        0,0,45,39,1,0,0,0,45,40,1,0,0,0,45,41,1,0,0,0,45,42,1,0,0,0,45,43,
        1,0,0,0,45,44,1,0,0,0,46,48,1,0,0,0,47,49,7,0,0,0,48,47,1,0,0,0,
        48,49,1,0,0,0,49,3,1,0,0,0,50,51,5,43,0,0,51,52,5,1,0,0,52,53,3,
        12,6,0,53,54,5,1,0,0,54,55,5,44,0,0,55,56,5,1,0,0,56,60,5,51,0,0,
        57,59,5,1,0,0,58,57,1,0,0,0,59,62,1,0,0,0,60,58,1,0,0,0,60,61,1,
        0,0,0,61,63,1,0,0,0,62,60,1,0,0,0,63,67,5,11,0,0,64,66,5,1,0,0,65,
        64,1,0,0,0,66,69,1,0,0,0,67,65,1,0,0,0,67,68,1,0,0,0,68,72,1,0,0,
        0,69,67,1,0,0,0,70,73,3,12,6,0,71,73,3,14,7,0,72,70,1,0,0,0,72,71,
        1,0,0,0,73,99,1,0,0,0,74,76,5,1,0,0,75,74,1,0,0,0,76,79,1,0,0,0,
        77,75,1,0,0,0,77,78,1,0,0,0,78,80,1,0,0,0,79,77,1,0,0,0,80,84,5,
        9,0,0,81,83,5,1,0,0,82,81,1,0,0,0,83,86,1,0,0,0,84,82,1,0,0,0,84,
        85,1,0,0,0,85,89,1,0,0,0,86,84,1,0,0,0,87,90,3,12,6,0,88,90,3,14,
        7,0,89,87,1,0,0,0,89,88,1,0,0,0,90,94,1,0,0,0,91,93,5,1,0,0,92,91,
        1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,95,98,1,0,0,0,
        96,94,1,0,0,0,97,77,1,0,0,0,98,101,1,0,0,0,99,97,1,0,0,0,99,100,
        1,0,0,0,100,105,1,0,0,0,101,99,1,0,0,0,102,104,5,1,0,0,103,102,1,
        0,0,0,104,107,1,0,0,0,105,103,1,0,0,0,105,106,1,0,0,0,106,108,1,
        0,0,0,107,105,1,0,0,0,108,112,5,12,0,0,109,111,5,1,0,0,110,109,1,
        0,0,0,111,114,1,0,0,0,112,110,1,0,0,0,112,113,1,0,0,0,113,115,1,
        0,0,0,114,112,1,0,0,0,115,119,5,37,0,0,116,118,5,1,0,0,117,116,1,
        0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,0,0,0,120,125,1,
        0,0,0,121,119,1,0,0,0,122,124,5,2,0,0,123,122,1,0,0,0,124,127,1,
        0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,131,1,0,0,0,127,125,1,
        0,0,0,128,130,5,1,0,0,129,128,1,0,0,0,130,133,1,0,0,0,131,129,1,
        0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,0,0,0,134,135,3,
        2,1,0,135,5,1,0,0,0,136,137,5,42,0,0,137,140,5,1,0,0,138,141,3,14,
        7,0,139,141,3,12,6,0,140,138,1,0,0,0,140,139,1,0,0,0,141,145,1,0,
        0,0,142,144,5,1,0,0,143,142,1,0,0,0,144,147,1,0,0,0,145,143,1,0,
        0,0,145,146,1,0,0,0,146,148,1,0,0,0,147,145,1,0,0,0,148,149,5,37,
        0,0,149,154,5,2,0,0,150,152,3,2,1,0,151,153,5,2,0,0,152,151,1,0,
        0,0,152,153,1,0,0,0,153,155,1,0,0,0,154,150,1,0,0,0,155,156,1,0,
        0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,7,1,0,0,0,158,159,6,4,-1,
        0,159,161,5,39,0,0,160,162,5,1,0,0,161,160,1,0,0,0,162,163,1,0,0,
        0,163,161,1,0,0,0,163,164,1,0,0,0,164,165,1,0,0,0,165,169,3,14,7,
        0,166,168,5,1,0,0,167,166,1,0,0,0,168,171,1,0,0,0,169,167,1,0,0,
        0,169,170,1,0,0,0,170,172,1,0,0,0,171,169,1,0,0,0,172,173,5,37,0,
        0,173,177,5,2,0,0,174,176,5,1,0,0,175,174,1,0,0,0,176,179,1,0,0,
        0,177,175,1,0,0,0,177,178,1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,
        0,180,182,3,2,1,0,181,180,1,0,0,0,182,183,1,0,0,0,183,181,1,0,0,
        0,183,184,1,0,0,0,184,283,1,0,0,0,185,189,10,2,0,0,186,188,7,1,0,
        0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,
        0,190,192,1,0,0,0,191,189,1,0,0,0,192,196,5,40,0,0,193,195,5,1,0,
        0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,
        0,197,199,1,0,0,0,198,196,1,0,0,0,199,203,5,37,0,0,200,202,7,1,0,
        0,201,200,1,0,0,0,202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,
        0,204,210,1,0,0,0,205,203,1,0,0,0,206,209,3,12,6,0,207,209,3,14,
        7,0,208,206,1,0,0,0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,
        0,0,210,211,1,0,0,0,211,213,1,0,0,0,212,210,1,0,0,0,213,282,7,0,
        0,0,214,256,10,1,0,0,215,217,7,1,0,0,216,215,1,0,0,0,217,220,1,0,
        0,0,218,216,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,218,1,0,
        0,0,221,223,5,41,0,0,222,224,5,1,0,0,223,222,1,0,0,0,224,225,1,0,
        0,0,225,223,1,0,0,0,225,226,1,0,0,0,226,227,1,0,0,0,227,231,3,14,
        7,0,228,230,5,1,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,
        0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,238,5,37,
        0,0,235,237,7,1,0,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,1,0,
        0,0,238,239,1,0,0,0,239,245,1,0,0,0,240,238,1,0,0,0,241,244,3,12,
        6,0,242,244,3,14,7,0,243,241,1,0,0,0,243,242,1,0,0,0,244,247,1,0,
        0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,251,1,0,0,0,247,245,1,0,
        0,0,248,250,7,1,0,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,1,0,
        0,0,251,252,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,254,218,1,0,
        0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,1,0,
        0,0,258,256,1,0,0,0,259,263,5,40,0,0,260,262,5,1,0,0,261,260,1,0,
        0,0,262,265,1,0,0,0,263,261,1,0,0,0,263,264,1,0,0,0,264,266,1,0,
        0,0,265,263,1,0,0,0,266,270,5,37,0,0,267,269,7,1,0,0,268,267,1,0,
        0,0,269,272,1,0,0,0,270,268,1,0,0,0,270,271,1,0,0,0,271,277,1,0,
        0,0,272,270,1,0,0,0,273,276,3,12,6,0,274,276,3,14,7,0,275,273,1,
        0,0,0,275,274,1,0,0,0,276,279,1,0,0,0,277,275,1,0,0,0,277,278,1,
        0,0,0,278,280,1,0,0,0,279,277,1,0,0,0,280,282,7,0,0,0,281,185,1,
        0,0,0,281,214,1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,
        0,0,0,284,9,1,0,0,0,285,283,1,0,0,0,286,287,5,38,0,0,287,288,5,1,
        0,0,288,292,5,118,0,0,289,291,5,1,0,0,290,289,1,0,0,0,291,294,1,
        0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,
        0,0,0,295,296,5,11,0,0,296,301,5,118,0,0,297,298,5,9,0,0,298,300,
        5,118,0,0,299,297,1,0,0,0,300,303,1,0,0,0,301,299,1,0,0,0,301,302,
        1,0,0,0,302,304,1,0,0,0,303,301,1,0,0,0,304,308,5,12,0,0,305,307,
        5,1,0,0,306,305,1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,
        1,0,0,0,309,311,1,0,0,0,310,308,1,0,0,0,311,312,5,37,0,0,312,316,
        5,2,0,0,313,315,5,1,0,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,
        1,0,0,0,316,317,1,0,0,0,317,320,1,0,0,0,318,316,1,0,0,0,319,321,
        3,2,1,0,320,319,1,0,0,0,321,322,1,0,0,0,322,320,1,0,0,0,322,323,
        1,0,0,0,323,327,1,0,0,0,324,326,5,2,0,0,325,324,1,0,0,0,326,329,
        1,0,0,0,327,325,1,0,0,0,327,328,1,0,0,0,328,11,1,0,0,0,329,327,1,
        0,0,0,330,331,6,6,-1,0,331,364,5,118,0,0,332,364,5,121,0,0,333,364,
        5,120,0,0,334,364,3,16,8,0,335,336,5,5,0,0,336,364,3,12,6,50,337,
        338,5,11,0,0,338,339,3,12,6,0,339,340,5,12,0,0,340,364,1,0,0,0,341,
        342,5,11,0,0,342,347,3,12,6,0,343,344,5,1,0,0,344,346,3,12,6,0,345,
        343,1,0,0,0,346,349,1,0,0,0,347,345,1,0,0,0,347,348,1,0,0,0,348,
        350,1,0,0,0,349,347,1,0,0,0,350,351,5,12,0,0,351,364,1,0,0,0,352,
        353,5,15,0,0,353,358,3,12,6,0,354,355,5,1,0,0,355,357,3,12,6,0,356,
        354,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,
        361,1,0,0,0,360,358,1,0,0,0,361,362,5,16,0,0,362,364,1,0,0,0,363,
        330,1,0,0,0,363,332,1,0,0,0,363,333,1,0,0,0,363,334,1,0,0,0,363,
        335,1,0,0,0,363,337,1,0,0,0,363,341,1,0,0,0,363,352,1,0,0,0,364,
        552,1,0,0,0,365,366,10,48,0,0,366,367,5,1,0,0,367,368,5,3,0,0,368,
        369,5,1,0,0,369,551,3,12,6,49,370,371,10,47,0,0,371,372,5,1,0,0,
        372,373,5,6,0,0,373,374,5,1,0,0,374,551,3,12,6,48,375,376,10,46,
        0,0,376,377,5,1,0,0,377,378,5,4,0,0,378,379,5,1,0,0,379,551,3,12,
        6,47,380,381,10,45,0,0,381,382,5,1,0,0,382,383,5,7,0,0,383,384,5,
        1,0,0,384,551,3,12,6,46,385,386,10,44,0,0,386,387,5,7,0,0,387,551,
        3,12,6,45,388,389,10,43,0,0,389,390,5,1,0,0,390,391,5,8,0,0,391,
        392,5,1,0,0,392,551,3,12,6,44,393,394,10,42,0,0,394,395,5,8,0,0,
        395,551,3,12,6,43,396,397,10,41,0,0,397,398,5,1,0,0,398,399,5,25,
        0,0,399,400,5,1,0,0,400,551,3,12,6,42,401,402,10,40,0,0,402,403,
        5,25,0,0,403,551,3,12,6,41,404,405,10,39,0,0,405,406,5,1,0,0,406,
        407,5,26,0,0,407,408,5,1,0,0,408,551,3,12,6,40,409,410,10,38,0,0,
        410,411,5,26,0,0,411,551,3,12,6,39,412,413,10,37,0,0,413,414,5,1,
        0,0,414,415,5,29,0,0,415,416,5,1,0,0,416,551,3,12,6,38,417,418,10,
        36,0,0,418,419,5,29,0,0,419,551,3,12,6,37,420,421,10,35,0,0,421,
        422,5,1,0,0,422,423,5,27,0,0,423,424,5,1,0,0,424,551,3,12,6,36,425,
        426,10,34,0,0,426,427,5,27,0,0,427,551,3,12,6,35,428,429,10,33,0,
        0,429,430,5,1,0,0,430,431,5,28,0,0,431,432,5,1,0,0,432,551,3,12,
        6,34,433,434,10,32,0,0,434,435,5,28,0,0,435,551,3,12,6,33,436,437,
        10,31,0,0,437,438,5,1,0,0,438,439,5,24,0,0,439,440,5,1,0,0,440,551,
        3,12,6,32,441,442,10,30,0,0,442,443,5,24,0,0,443,551,3,12,6,31,444,
        445,10,29,0,0,445,446,5,1,0,0,446,447,5,17,0,0,447,448,5,1,0,0,448,
        551,3,12,6,30,449,450,10,28,0,0,450,451,5,17,0,0,451,551,3,12,6,
        29,452,453,10,27,0,0,453,454,5,1,0,0,454,455,5,18,0,0,455,456,5,
        1,0,0,456,551,3,12,6,28,457,458,10,26,0,0,458,459,5,18,0,0,459,551,
        3,12,6,27,460,461,10,25,0,0,461,462,5,1,0,0,462,463,5,19,0,0,463,
        464,5,1,0,0,464,551,3,12,6,26,465,466,10,24,0,0,466,467,5,19,0,0,
        467,551,3,12,6,25,468,469,10,23,0,0,469,470,5,1,0,0,470,471,5,20,
        0,0,471,472,5,1,0,0,472,551,3,12,6,24,473,474,10,22,0,0,474,475,
        5,20,0,0,475,551,3,12,6,23,476,477,10,21,0,0,477,478,5,1,0,0,478,
        479,5,21,0,0,479,480,5,1,0,0,480,551,3,12,6,22,481,482,10,20,0,0,
        482,483,5,21,0,0,483,551,3,12,6,21,484,485,10,18,0,0,485,486,5,1,
        0,0,486,487,5,23,0,0,487,488,5,1,0,0,488,551,3,12,6,19,489,490,10,
        17,0,0,490,491,5,23,0,0,491,551,3,12,6,18,492,493,10,16,0,0,493,
        494,5,1,0,0,494,495,5,30,0,0,495,496,5,1,0,0,496,551,3,12,6,17,497,
        498,10,15,0,0,498,499,5,30,0,0,499,551,3,12,6,16,500,501,10,14,0,
        0,501,502,5,1,0,0,502,503,5,31,0,0,503,504,5,1,0,0,504,551,3,12,
        6,15,505,506,10,13,0,0,506,507,5,31,0,0,507,551,3,12,6,14,508,509,
        10,12,0,0,509,510,5,1,0,0,510,511,5,32,0,0,511,512,5,1,0,0,512,551,
        3,12,6,13,513,514,10,11,0,0,514,515,5,32,0,0,515,551,3,12,6,12,516,
        517,10,10,0,0,517,518,5,1,0,0,518,519,5,33,0,0,519,520,5,1,0,0,520,
        551,3,12,6,11,521,522,10,9,0,0,522,523,5,33,0,0,523,551,3,12,6,10,
        524,525,10,8,0,0,525,526,5,1,0,0,526,527,5,34,0,0,527,528,5,1,0,
        0,528,551,3,12,6,9,529,530,10,7,0,0,530,531,5,34,0,0,531,551,3,12,
        6,8,532,533,10,6,0,0,533,534,5,1,0,0,534,535,5,35,0,0,535,536,5,
        1,0,0,536,551,3,12,6,7,537,538,10,5,0,0,538,539,5,35,0,0,539,551,
        3,12,6,6,540,541,10,4,0,0,541,542,5,1,0,0,542,543,5,36,0,0,543,544,
        5,1,0,0,544,551,3,12,6,5,545,546,10,3,0,0,546,547,5,36,0,0,547,551,
        3,12,6,4,548,549,10,19,0,0,549,551,5,22,0,0,550,365,1,0,0,0,550,
        370,1,0,0,0,550,375,1,0,0,0,550,380,1,0,0,0,550,385,1,0,0,0,550,
        388,1,0,0,0,550,393,1,0,0,0,550,396,1,0,0,0,550,401,1,0,0,0,550,
        404,1,0,0,0,550,409,1,0,0,0,550,412,1,0,0,0,550,417,1,0,0,0,550,
        420,1,0,0,0,550,425,1,0,0,0,550,428,1,0,0,0,550,433,1,0,0,0,550,
        436,1,0,0,0,550,441,1,0,0,0,550,444,1,0,0,0,550,449,1,0,0,0,550,
        452,1,0,0,0,550,457,1,0,0,0,550,460,1,0,0,0,550,465,1,0,0,0,550,
        468,1,0,0,0,550,473,1,0,0,0,550,476,1,0,0,0,550,481,1,0,0,0,550,
        484,1,0,0,0,550,489,1,0,0,0,550,492,1,0,0,0,550,497,1,0,0,0,550,
        500,1,0,0,0,550,505,1,0,0,0,550,508,1,0,0,0,550,513,1,0,0,0,550,
        516,1,0,0,0,550,521,1,0,0,0,550,524,1,0,0,0,550,529,1,0,0,0,550,
        532,1,0,0,0,550,537,1,0,0,0,550,540,1,0,0,0,550,545,1,0,0,0,550,
        548,1,0,0,0,551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,
        13,1,0,0,0,554,552,1,0,0,0,555,556,6,7,-1,0,556,682,5,117,0,0,557,
        558,5,11,0,0,558,559,3,14,7,0,559,560,5,12,0,0,560,682,1,0,0,0,561,
        562,5,11,0,0,562,567,3,14,7,0,563,564,5,1,0,0,564,566,3,14,7,0,565,
        563,1,0,0,0,566,569,1,0,0,0,567,565,1,0,0,0,567,568,1,0,0,0,568,
        570,1,0,0,0,569,567,1,0,0,0,570,571,5,12,0,0,571,682,1,0,0,0,572,
        573,5,15,0,0,573,578,3,14,7,0,574,575,5,1,0,0,575,577,3,14,7,0,576,
        574,1,0,0,0,577,580,1,0,0,0,578,576,1,0,0,0,578,579,1,0,0,0,579,
        581,1,0,0,0,580,578,1,0,0,0,581,582,5,16,0,0,582,682,1,0,0,0,583,
        584,3,12,6,0,584,585,5,1,0,0,585,586,5,3,0,0,586,587,5,1,0,0,587,
        588,3,12,6,0,588,682,1,0,0,0,589,590,3,12,6,0,590,591,5,1,0,0,591,
        592,5,6,0,0,592,593,5,1,0,0,593,594,3,12,6,0,594,682,1,0,0,0,595,
        596,3,12,6,0,596,597,5,1,0,0,597,598,5,4,0,0,598,599,5,1,0,0,599,
        600,3,12,6,0,600,682,1,0,0,0,601,602,3,12,6,0,602,603,5,1,0,0,603,
        604,5,7,0,0,604,605,5,1,0,0,605,606,3,12,6,0,606,682,1,0,0,0,607,
        608,3,12,6,0,608,609,5,7,0,0,609,610,3,12,6,0,610,682,1,0,0,0,611,
        612,3,12,6,0,612,613,5,1,0,0,613,614,5,8,0,0,614,615,5,1,0,0,615,
        616,3,12,6,0,616,682,1,0,0,0,617,618,3,12,6,0,618,619,5,8,0,0,619,
        620,3,12,6,0,620,682,1,0,0,0,621,622,3,12,6,0,622,623,5,1,0,0,623,
        624,5,25,0,0,624,625,5,1,0,0,625,626,3,12,6,0,626,682,1,0,0,0,627,
        628,3,12,6,0,628,629,5,25,0,0,629,630,3,12,6,0,630,682,1,0,0,0,631,
        632,3,12,6,0,632,633,5,1,0,0,633,634,5,26,0,0,634,635,5,1,0,0,635,
        636,3,12,6,0,636,682,1,0,0,0,637,638,3,12,6,0,638,639,5,26,0,0,639,
        640,3,12,6,0,640,682,1,0,0,0,641,642,3,12,6,0,642,643,5,1,0,0,643,
        644,5,29,0,0,644,645,5,1,0,0,645,646,3,12,6,0,646,682,1,0,0,0,647,
        648,3,12,6,0,648,649,5,29,0,0,649,650,3,12,6,0,650,682,1,0,0,0,651,
        652,3,12,6,0,652,653,5,1,0,0,653,654,5,27,0,0,654,655,5,1,0,0,655,
        656,3,12,6,0,656,682,1,0,0,0,657,658,3,12,6,0,658,659,5,27,0,0,659,
        660,3,12,6,0,660,682,1,0,0,0,661,662,3,12,6,0,662,663,5,1,0,0,663,
        664,5,28,0,0,664,665,5,1,0,0,665,666,3,12,6,0,666,682,1,0,0,0,667,
        668,3,12,6,0,668,669,5,28,0,0,669,670,3,12,6,0,670,682,1,0,0,0,671,
        672,3,12,6,0,672,673,5,1,0,0,673,674,5,24,0,0,674,675,5,1,0,0,675,
        676,3,12,6,0,676,682,1,0,0,0,677,678,3,12,6,0,678,679,5,24,0,0,679,
        680,3,12,6,0,680,682,1,0,0,0,681,555,1,0,0,0,681,557,1,0,0,0,681,
        561,1,0,0,0,681,572,1,0,0,0,681,583,1,0,0,0,681,589,1,0,0,0,681,
        595,1,0,0,0,681,601,1,0,0,0,681,607,1,0,0,0,681,611,1,0,0,0,681,
        617,1,0,0,0,681,621,1,0,0,0,681,627,1,0,0,0,681,631,1,0,0,0,681,
        637,1,0,0,0,681,641,1,0,0,0,681,647,1,0,0,0,681,651,1,0,0,0,681,
        657,1,0,0,0,681,661,1,0,0,0,681,667,1,0,0,0,681,671,1,0,0,0,681,
        677,1,0,0,0,682,854,1,0,0,0,683,684,10,63,0,0,684,685,5,1,0,0,685,
        686,5,3,0,0,686,687,5,1,0,0,687,853,3,14,7,64,688,689,10,62,0,0,
        689,690,5,1,0,0,690,691,5,6,0,0,691,692,5,1,0,0,692,853,3,14,7,63,
        693,694,10,61,0,0,694,695,5,1,0,0,695,696,5,4,0,0,696,697,5,1,0,
        0,697,853,3,14,7,62,698,699,10,60,0,0,699,700,5,1,0,0,700,701,5,
        7,0,0,701,702,5,1,0,0,702,853,3,14,7,61,703,704,10,59,0,0,704,705,
        5,7,0,0,705,853,3,14,7,60,706,707,10,58,0,0,707,708,5,1,0,0,708,
        709,5,8,0,0,709,710,5,1,0,0,710,853,3,14,7,59,711,712,10,57,0,0,
        712,713,5,8,0,0,713,853,3,14,7,58,714,715,10,56,0,0,715,716,5,1,
        0,0,716,717,5,17,0,0,717,718,5,1,0,0,718,853,3,14,7,57,719,720,10,
        55,0,0,720,721,5,17,0,0,721,853,3,14,7,56,722,723,10,54,0,0,723,
        724,5,1,0,0,724,725,5,18,0,0,725,726,5,1,0,0,726,853,3,14,7,55,727,
        728,10,53,0,0,728,729,5,18,0,0,729,853,3,14,7,54,730,731,10,52,0,
        0,731,732,5,1,0,0,732,733,5,19,0,0,733,734,5,1,0,0,734,853,3,14,
        7,53,735,736,10,51,0,0,736,737,5,19,0,0,737,853,3,14,7,52,738,739,
        10,50,0,0,739,740,5,1,0,0,740,741,5,20,0,0,741,742,5,1,0,0,742,853,
        3,14,7,51,743,744,10,49,0,0,744,745,5,20,0,0,745,853,3,14,7,50,746,
        747,10,48,0,0,747,748,5,1,0,0,748,749,5,21,0,0,749,750,5,1,0,0,750,
        853,3,14,7,49,751,752,10,47,0,0,752,753,5,21,0,0,753,853,3,14,7,
        48,754,755,10,45,0,0,755,756,5,1,0,0,756,757,5,23,0,0,757,758,5,
        1,0,0,758,853,3,14,7,46,759,760,10,44,0,0,760,761,5,23,0,0,761,853,
        3,14,7,45,762,763,10,43,0,0,763,764,5,1,0,0,764,765,5,24,0,0,765,
        766,5,1,0,0,766,853,3,14,7,44,767,768,10,42,0,0,768,769,5,24,0,0,
        769,853,3,14,7,43,770,771,10,41,0,0,771,772,5,1,0,0,772,773,5,25,
        0,0,773,774,5,1,0,0,774,853,3,14,7,42,775,776,10,40,0,0,776,777,
        5,25,0,0,777,853,3,14,7,41,778,779,10,39,0,0,779,780,5,1,0,0,780,
        781,5,26,0,0,781,782,5,1,0,0,782,853,3,14,7,40,783,784,10,38,0,0,
        784,785,5,26,0,0,785,853,3,14,7,39,786,787,10,37,0,0,787,788,5,1,
        0,0,788,789,5,29,0,0,789,790,5,1,0,0,790,853,3,14,7,38,791,792,10,
        36,0,0,792,793,5,29,0,0,793,853,3,14,7,37,794,795,10,35,0,0,795,
        796,5,1,0,0,796,797,5,30,0,0,797,798,5,1,0,0,798,853,3,14,7,36,799,
        800,10,34,0,0,800,801,5,30,0,0,801,853,3,14,7,35,802,803,10,33,0,
        0,803,804,5,1,0,0,804,805,5,31,0,0,805,806,5,1,0,0,806,853,3,14,
        7,34,807,808,10,32,0,0,808,809,5,31,0,0,809,853,3,14,7,33,810,811,
        10,31,0,0,811,812,5,1,0,0,812,813,5,32,0,0,813,814,5,1,0,0,814,853,
        3,14,7,32,815,816,10,30,0,0,816,817,5,32,0,0,817,853,3,14,7,31,818,
        819,10,29,0,0,819,820,5,1,0,0,820,821,5,33,0,0,821,822,5,1,0,0,822,
        853,3,14,7,30,823,824,10,28,0,0,824,825,5,33,0,0,825,853,3,14,7,
        29,826,827,10,27,0,0,827,828,5,1,0,0,828,829,5,34,0,0,829,830,5,
        1,0,0,830,853,3,14,7,28,831,832,10,26,0,0,832,833,5,34,0,0,833,853,
        3,14,7,27,834,835,10,25,0,0,835,836,5,1,0,0,836,837,5,35,0,0,837,
        838,5,1,0,0,838,853,3,14,7,26,839,840,10,24,0,0,840,841,5,35,0,0,
        841,853,3,14,7,25,842,843,10,23,0,0,843,844,5,1,0,0,844,845,5,36,
        0,0,845,846,5,1,0,0,846,853,3,14,7,24,847,848,10,22,0,0,848,849,
        5,36,0,0,849,853,3,14,7,23,850,851,10,46,0,0,851,853,5,22,0,0,852,
        683,1,0,0,0,852,688,1,0,0,0,852,693,1,0,0,0,852,698,1,0,0,0,852,
        703,1,0,0,0,852,706,1,0,0,0,852,711,1,0,0,0,852,714,1,0,0,0,852,
        719,1,0,0,0,852,722,1,0,0,0,852,727,1,0,0,0,852,730,1,0,0,0,852,
        735,1,0,0,0,852,738,1,0,0,0,852,743,1,0,0,0,852,746,1,0,0,0,852,
        751,1,0,0,0,852,754,1,0,0,0,852,759,1,0,0,0,852,762,1,0,0,0,852,
        767,1,0,0,0,852,770,1,0,0,0,852,775,1,0,0,0,852,778,1,0,0,0,852,
        783,1,0,0,0,852,786,1,0,0,0,852,791,1,0,0,0,852,794,1,0,0,0,852,
        799,1,0,0,0,852,802,1,0,0,0,852,807,1,0,0,0,852,810,1,0,0,0,852,
        815,1,0,0,0,852,818,1,0,0,0,852,823,1,0,0,0,852,826,1,0,0,0,852,
        831,1,0,0,0,852,834,1,0,0,0,852,839,1,0,0,0,852,842,1,0,0,0,852,
        847,1,0,0,0,852,850,1,0,0,0,853,856,1,0,0,0,854,852,1,0,0,0,854,
        855,1,0,0,0,855,15,1,0,0,0,856,854,1,0,0,0,857,858,5,118,0,0,858,
        859,5,11,0,0,859,864,3,12,6,0,860,861,5,9,0,0,861,863,3,12,6,0,862,
        860,1,0,0,0,863,866,1,0,0,0,864,862,1,0,0,0,864,865,1,0,0,0,865,
        867,1,0,0,0,866,864,1,0,0,0,867,868,5,12,0,0,868,882,1,0,0,0,869,
        870,5,118,0,0,870,871,5,11,0,0,871,876,3,14,7,0,872,873,5,9,0,0,
        873,875,3,14,7,0,874,872,1,0,0,0,875,878,1,0,0,0,876,874,1,0,0,0,
        876,877,1,0,0,0,877,879,1,0,0,0,878,876,1,0,0,0,879,880,5,12,0,0,
        880,882,1,0,0,0,881,857,1,0,0,0,881,869,1,0,0,0,882,17,1,0,0,0,63,
        21,29,45,48,60,67,72,77,84,89,94,99,105,112,119,125,131,140,145,
        152,156,163,169,177,183,189,196,203,208,210,218,225,231,238,243,
        245,251,256,263,270,275,277,281,283,292,301,308,316,322,327,347,
        358,363,550,552,567,578,681,852,854,864,876,881
    ]

class PythonParser ( Parser ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "'\\n'", "'and'", "'or'", 
                     "'not'", "'&'", "'|'", "'='", "','", "';'", "'('", 
                     "')'", "'{'", "'}'", "'['", "']'", "'+'", "'-'", "'*'", 
                     "'/'", "'//'", "'**'", "'%'", "'=='", "'<'", "'>'", 
                     "'<='", "'>='", "'!='", "'+='", "'-='", "'*='", "'/='", 
                     "'//='", "'**='", "'%='", "':'", "'def'", "'if'", "'else'", 
                     "'elif'", "'while'", "'for'", "'in'", "'str'", "'int'", 
                     "'float'", "'complex'", "'list'", "'tuple'", "'range'", 
                     "'dict'", "'set'", "'frozenset'", "'bool'", "'bytes'", 
                     "'bytearray'", "'memoryview'", "'NoneType'", "'abs'", 
                     "'aiter'", "'all'", "'anext'", "'any'", "'ascii'", 
                     "'bin'", "'breakpoint'", "'callable'", "'chr'", "'classmethod'", 
                     "'compile'", "'delattr'", "'dir'", "'divmod'", "'enumerate'", 
                     "'eval'", "'exec'", "'filter'", "'format'", "'getattr'", 
                     "'globals'", "'hasattr'", "'hash'", "'help'", "'hex'", 
                     "'id'", "'input'", "'isinstance'", "'issubclass'", 
                     "'iter'", "'len'", "'locals'", "'map'", "'max'", "'min'", 
                     "'next'", "'object'", "'oct'", "'open'", "'ord'", "'pow'", 
                     "'print'", "'property'", "'repr'", "'reversed'", "'round'", 
                     "'setattr'", "'slice'", "'sorted'", "'staticmethod'", 
                     "'sum'", "'super'", "'type'", "'vars'", "'zip'", "'import'" ]

    symbolicNames = [ "<INVALID>", "INDETACAO", "LINE_BREAK", "AND", "OR", 
                      "NOT", "ANDSYMBOL", "ORSYMBOL", "EQ", "COMMA", "SEMI", 
                      "LPAREN", "RPAREN", "LCURLY", "RCURLY", "LPARENREC", 
                      "RPARENREC", "PLUS", "MINUS", "MULT", "DIVISION", 
                      "DIVISIONINT", "EXP", "RESTO", "ATRIBUI", "LESS", 
                      "GREATER", "LESSEQUAL", "GREATEREQUAL", "NOTEQUAL", 
                      "PLUSEQUAL", "MINUSEQUAL", "MULTEQUAL", "DIVISIONEQUAL", 
                      "DIVISIONINTEQUAL", "EXPEQUAL", "RESTOEQUAL", "BLOCK", 
                      "FUNCTION", "IF", "ELSE", "ELIF", "WHILE", "FOR", 
                      "IN", "TEXTTYPE", "INTTYPE", "FLOATTYPE", "COMPLEXTYPE", 
                      "LISTTYPE", "TUPLETYPE", "RANGETYPE", "MAPPINGTYPE", 
                      "SETTYPE", "FROZENSET", "BOOLTYPE", "BYTESTYPE", "BYTEARRAYTYPE", 
                      "MEMORYVIEWTYPE", "NONETYPE", "ABS", "AITER", "ALL", 
                      "ANEXT", "ANY", "ASCII", "BIN", "BREAKPOINT", "CALLABLE", 
                      "CHR", "CLASSMETHOD", "COMPILE", "DELATTR", "DIR", 
                      "DIVMOD", "ENUMERATE", "EVAL", "EXEC", "FILTER", "FORMAT", 
                      "GETATTR", "GLOBALS", "HASATTR", "HASH", "HELP", "HEX", 
                      "IDENT", "INPUT", "ISINSTANCE", "ISSUBCLASS", "ITER", 
                      "LEN", "LOCALS", "MAP", "MAX", "MIN", "NEXT", "OBJECT", 
                      "OCT", "OPEN", "ORD", "POW", "PRINT", "PROPERTY", 
                      "REPR", "REVERSED", "ROUND", "SETATTR", "SLICE", "SORTED", 
                      "STATICMETHOD", "SUM", "SUPER", "TYPE", "VARS", "ZIP", 
                      "IMPORT", "BOOL", "ID", "LETTER", "FLOAT", "DIGITS", 
                      "DIGIT", "WS" ]

    RULE_code = 0
    RULE_stat = 1
    RULE_for = 2
    RULE_loop_while = 3
    RULE_condicional = 4
    RULE_def = 5
    RULE_expr = 6
    RULE_query = 7
    RULE_func = 8

    ruleNames =  [ "code", "stat", "for", "loop_while", "condicional", "def", 
                   "expr", "query", "func" ]

    EOF = Token.EOF
    INDETACAO=1
    LINE_BREAK=2
    AND=3
    OR=4
    NOT=5
    ANDSYMBOL=6
    ORSYMBOL=7
    EQ=8
    COMMA=9
    SEMI=10
    LPAREN=11
    RPAREN=12
    LCURLY=13
    RCURLY=14
    LPARENREC=15
    RPARENREC=16
    PLUS=17
    MINUS=18
    MULT=19
    DIVISION=20
    DIVISIONINT=21
    EXP=22
    RESTO=23
    ATRIBUI=24
    LESS=25
    GREATER=26
    LESSEQUAL=27
    GREATEREQUAL=28
    NOTEQUAL=29
    PLUSEQUAL=30
    MINUSEQUAL=31
    MULTEQUAL=32
    DIVISIONEQUAL=33
    DIVISIONINTEQUAL=34
    EXPEQUAL=35
    RESTOEQUAL=36
    BLOCK=37
    FUNCTION=38
    IF=39
    ELSE=40
    ELIF=41
    WHILE=42
    FOR=43
    IN=44
    TEXTTYPE=45
    INTTYPE=46
    FLOATTYPE=47
    COMPLEXTYPE=48
    LISTTYPE=49
    TUPLETYPE=50
    RANGETYPE=51
    MAPPINGTYPE=52
    SETTYPE=53
    FROZENSET=54
    BOOLTYPE=55
    BYTESTYPE=56
    BYTEARRAYTYPE=57
    MEMORYVIEWTYPE=58
    NONETYPE=59
    ABS=60
    AITER=61
    ALL=62
    ANEXT=63
    ANY=64
    ASCII=65
    BIN=66
    BREAKPOINT=67
    CALLABLE=68
    CHR=69
    CLASSMETHOD=70
    COMPILE=71
    DELATTR=72
    DIR=73
    DIVMOD=74
    ENUMERATE=75
    EVAL=76
    EXEC=77
    FILTER=78
    FORMAT=79
    GETATTR=80
    GLOBALS=81
    HASATTR=82
    HASH=83
    HELP=84
    HEX=85
    IDENT=86
    INPUT=87
    ISINSTANCE=88
    ISSUBCLASS=89
    ITER=90
    LEN=91
    LOCALS=92
    MAP=93
    MAX=94
    MIN=95
    NEXT=96
    OBJECT=97
    OCT=98
    OPEN=99
    ORD=100
    POW=101
    PRINT=102
    PROPERTY=103
    REPR=104
    REVERSED=105
    ROUND=106
    SETATTR=107
    SLICE=108
    SORTED=109
    STATICMETHOD=110
    SUM=111
    SUPER=112
    TYPE=113
    VARS=114
    ZIP=115
    IMPORT=116
    BOOL=117
    ID=118
    LETTER=119
    FLOAT=120
    DIGITS=121
    DIGIT=122
    WS=123

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class CodeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_code

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCode" ):
                return visitor.visitCode(self)
            else:
                return visitor.visitChildren(self)




    def code(self):

        localctx = PythonParser.CodeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_code)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 21
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 14018773288998) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 27) != 0):
                self.state = 18
                self.stat()
                self.state = 23
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 24
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PythonParser.ID, 0)

        def EQ(self):
            return self.getToken(PythonParser.EQ, 0)

        def query(self):
            return self.getTypedRuleContext(PythonParser.QueryContext,0)


        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def loop_while(self):
            return self.getTypedRuleContext(PythonParser.Loop_whileContext,0)


        def condicional(self):
            return self.getTypedRuleContext(PythonParser.CondicionalContext,0)


        def for_(self):
            return self.getTypedRuleContext(PythonParser.ForContext,0)


        def def_(self):
            return self.getTypedRuleContext(PythonParser.DefContext,0)


        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def SEMI(self):
            return self.getToken(PythonParser.SEMI, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_stat

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStat" ):
                return visitor.visitStat(self)
            else:
                return visitor.visitChildren(self)




    def stat(self):

        localctx = PythonParser.StatContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_stat)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 29
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 26
                self.match(PythonParser.INDETACAO)
                self.state = 31
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 45
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
            if la_ == 1:
                self.state = 32
                self.match(PythonParser.ID)
                self.state = 33
                self.match(PythonParser.EQ)
                self.state = 34
                self.query(0)
                pass

            elif la_ == 2:
                self.state = 35
                self.query(0)
                pass

            elif la_ == 3:
                self.state = 36
                self.match(PythonParser.ID)
                self.state = 37
                self.match(PythonParser.EQ)
                self.state = 38
                self.expr(0)
                pass

            elif la_ == 4:
                self.state = 39
                self.expr(0)
                pass

            elif la_ == 5:
                self.state = 40
                self.match(PythonParser.LINE_BREAK)
                pass

            elif la_ == 6:
                self.state = 41
                self.loop_while()
                pass

            elif la_ == 7:
                self.state = 42
                self.condicional(0)
                pass

            elif la_ == 8:
                self.state = 43
                self.for_()
                pass

            elif la_ == 9:
                self.state = 44
                self.def_()
                pass


            self.state = 48
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.state = 47
                _la = self._input.LA(1)
                if not(_la==2 or _la==10):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def RANGETYPE(self):
            return self.getToken(PythonParser.RANGETYPE, 0)

        def LPAREN(self):
            return self.getToken(PythonParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PythonParser.RPAREN, 0)

        def BLOCK(self):
            return self.getToken(PythonParser.BLOCK, 0)

        def stat(self):
            return self.getTypedRuleContext(PythonParser.StatContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.QueryContext)
            else:
                return self.getTypedRuleContext(PythonParser.QueryContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_for

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor" ):
                return visitor.visitFor(self)
            else:
                return visitor.visitChildren(self)




    def for_(self):

        localctx = PythonParser.ForContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 50
            self.match(PythonParser.FOR)
            self.state = 51
            self.match(PythonParser.INDETACAO)
            self.state = 52
            self.expr(0)
            self.state = 53
            self.match(PythonParser.INDETACAO)
            self.state = 54
            self.match(PythonParser.IN)
            self.state = 55
            self.match(PythonParser.INDETACAO)
            self.state = 56
            self.match(PythonParser.RANGETYPE)
            self.state = 60
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 57
                self.match(PythonParser.INDETACAO)
                self.state = 62
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 63
            self.match(PythonParser.LPAREN)

            self.state = 67
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 64
                self.match(PythonParser.INDETACAO)
                self.state = 69
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 72
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 70
                self.expr(0)
                pass

            elif la_ == 2:
                self.state = 71
                self.query(0)
                pass


            self.state = 99
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,11,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 77
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 74
                        self.match(PythonParser.INDETACAO)
                        self.state = 79
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 80
                    self.match(PythonParser.COMMA)
                    self.state = 84
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1:
                        self.state = 81
                        self.match(PythonParser.INDETACAO)
                        self.state = 86
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 89
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                    if la_ == 1:
                        self.state = 87
                        self.expr(0)
                        pass

                    elif la_ == 2:
                        self.state = 88
                        self.query(0)
                        pass


                    self.state = 94
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 91
                            self.match(PythonParser.INDETACAO) 
                        self.state = 96
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
             
                self.state = 101
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,11,self._ctx)

            self.state = 105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 102
                self.match(PythonParser.INDETACAO)
                self.state = 107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 108
            self.match(PythonParser.RPAREN)
            self.state = 112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 109
                self.match(PythonParser.INDETACAO)
                self.state = 114
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 115
            self.match(PythonParser.BLOCK)
            self.state = 119
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 116
                    self.match(PythonParser.INDETACAO) 
                self.state = 121
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

            self.state = 125
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 122
                    self.match(PythonParser.LINE_BREAK) 
                self.state = 127
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

            self.state = 131
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 128
                    self.match(PythonParser.INDETACAO) 
                self.state = 133
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

            self.state = 134
            self.stat()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Loop_whileContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)

        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def BLOCK(self):
            return self.getToken(PythonParser.BLOCK, 0)

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def query(self):
            return self.getTypedRuleContext(PythonParser.QueryContext,0)


        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_loop_while

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop_while" ):
                return visitor.visitLoop_while(self)
            else:
                return visitor.visitChildren(self)




    def loop_while(self):

        localctx = PythonParser.Loop_whileContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_loop_while)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 136
            self.match(PythonParser.WHILE)
            self.state = 137
            self.match(PythonParser.INDETACAO)
            self.state = 140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.state = 138
                self.query(0)
                pass

            elif la_ == 2:
                self.state = 139
                self.expr(0)
                pass


            self.state = 145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 142
                self.match(PythonParser.INDETACAO)
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 148
            self.match(PythonParser.BLOCK)
            self.state = 149
            self.match(PythonParser.LINE_BREAK)
            self.state = 154 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 150
                    self.stat()
                    self.state = 152
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        self.state = 151
                        self.match(PythonParser.LINE_BREAK)



                else:
                    raise NoViableAltException(self)
                self.state = 156 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CondicionalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.QueryContext)
            else:
                return self.getTypedRuleContext(PythonParser.QueryContext,i)


        def BLOCK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.BLOCK)
            else:
                return self.getToken(PythonParser.BLOCK, i)

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatContext,i)


        def condicional(self):
            return self.getTypedRuleContext(PythonParser.CondicionalContext,0)


        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def SEMI(self):
            return self.getToken(PythonParser.SEMI, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def ELIF(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELIF)
            else:
                return self.getToken(PythonParser.ELIF, i)

        def getRuleIndex(self):
            return PythonParser.RULE_condicional

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondicional" ):
                return visitor.visitCondicional(self)
            else:
                return visitor.visitChildren(self)



    def condicional(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.CondicionalContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 8
        self.enterRecursionRule(localctx, 8, self.RULE_condicional, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self.match(PythonParser.IF)
            self.state = 161 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 160
                self.match(PythonParser.INDETACAO)
                self.state = 163 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1):
                    break

            self.state = 165
            self.query(0)
            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 166
                self.match(PythonParser.INDETACAO)
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 172
            self.match(PythonParser.BLOCK)
            self.state = 173
            self.match(PythonParser.LINE_BREAK)
            self.state = 177
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 174
                    self.match(PythonParser.INDETACAO) 
                self.state = 179
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

            self.state = 181 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 180
                    self.stat()

                else:
                    raise NoViableAltException(self)
                self.state = 183 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

            self._ctx.stop = self._input.LT(-1)
            self.state = 283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,43,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 281
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.CondicionalContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_condicional)
                        self.state = 185
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 189
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1 or _la==2:
                            self.state = 186
                            _la = self._input.LA(1)
                            if not(_la==1 or _la==2):
                                self._errHandler.recoverInline(self)
                            else:
                                self._errHandler.reportMatch(self)
                                self.consume()
                            self.state = 191
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 192
                        self.match(PythonParser.ELSE)
                        self.state = 196
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 193
                            self.match(PythonParser.INDETACAO)
                            self.state = 198
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 199
                        self.match(PythonParser.BLOCK)
                        self.state = 203
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 200
                                _la = self._input.LA(1)
                                if not(_la==1 or _la==2):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 205
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                        self.state = 210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & 34848) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 27) != 0):
                            self.state = 208
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
                            if la_ == 1:
                                self.state = 206
                                self.expr(0)
                                pass

                            elif la_ == 2:
                                self.state = 207
                                self.query(0)
                                pass


                            self.state = 212
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 213
                        _la = self._input.LA(1)
                        if not(_la==2 or _la==10):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.CondicionalContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_condicional)
                        self.state = 214
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 256
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2199023255558) != 0):
                            self.state = 218
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1 or _la==2:
                                self.state = 215
                                _la = self._input.LA(1)
                                if not(_la==1 or _la==2):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume()
                                self.state = 220
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 221
                            self.match(PythonParser.ELIF)
                            self.state = 223 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while True:
                                self.state = 222
                                self.match(PythonParser.INDETACAO)
                                self.state = 225 
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)
                                if not (_la==1):
                                    break

                            self.state = 227
                            self.query(0)
                            self.state = 231
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while _la==1:
                                self.state = 228
                                self.match(PythonParser.INDETACAO)
                                self.state = 233
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 234
                            self.match(PythonParser.BLOCK)
                            self.state = 238
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt==1:
                                    self.state = 235
                                    _la = self._input.LA(1)
                                    if not(_la==1 or _la==2):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume() 
                                self.state = 240
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

                            self.state = 245
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 34848) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 27) != 0):
                                self.state = 243
                                self._errHandler.sync(self)
                                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                                if la_ == 1:
                                    self.state = 241
                                    self.expr(0)
                                    pass

                                elif la_ == 2:
                                    self.state = 242
                                    self.query(0)
                                    pass


                                self.state = 247
                                self._errHandler.sync(self)
                                _la = self._input.LA(1)

                            self.state = 251
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,36,self._ctx)
                            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                                if _alt==1:
                                    self.state = 248
                                    _la = self._input.LA(1)
                                    if not(_la==1 or _la==2):
                                        self._errHandler.recoverInline(self)
                                    else:
                                        self._errHandler.reportMatch(self)
                                        self.consume() 
                                self.state = 253
                                self._errHandler.sync(self)
                                _alt = self._interp.adaptivePredict(self._input,36,self._ctx)

                            self.state = 258
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 259
                        self.match(PythonParser.ELSE)
                        self.state = 263
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==1:
                            self.state = 260
                            self.match(PythonParser.INDETACAO)
                            self.state = 265
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 266
                        self.match(PythonParser.BLOCK)
                        self.state = 270
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,39,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 267
                                _la = self._input.LA(1)
                                if not(_la==1 or _la==2):
                                    self._errHandler.recoverInline(self)
                                else:
                                    self._errHandler.reportMatch(self)
                                    self.consume() 
                            self.state = 272
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,39,self._ctx)

                        self.state = 277
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & 34848) != 0) or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & 27) != 0):
                            self.state = 275
                            self._errHandler.sync(self)
                            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                            if la_ == 1:
                                self.state = 273
                                self.expr(0)
                                pass

                            elif la_ == 2:
                                self.state = 274
                                self.query(0)
                                pass


                            self.state = 279
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 280
                        _la = self._input.LA(1)
                        if not(_la==2 or _la==10):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass

             
                self.state = 285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,43,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FUNCTION(self):
            return self.getToken(PythonParser.FUNCTION, 0)

        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def ID(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ID)
            else:
                return self.getToken(PythonParser.ID, i)

        def LPAREN(self):
            return self.getToken(PythonParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PythonParser.RPAREN, 0)

        def BLOCK(self):
            return self.getToken(PythonParser.BLOCK, 0)

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def stat(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StatContext)
            else:
                return self.getTypedRuleContext(PythonParser.StatContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_def

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef" ):
                return visitor.visitDef(self)
            else:
                return visitor.visitChildren(self)




    def def_(self):

        localctx = PythonParser.DefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_def)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 286
            self.match(PythonParser.FUNCTION)
            self.state = 287
            self.match(PythonParser.INDETACAO)
            self.state = 288
            self.match(PythonParser.ID)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 289
                self.match(PythonParser.INDETACAO)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self.match(PythonParser.LPAREN)
            self.state = 296
            self.match(PythonParser.ID)
            self.state = 301
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==9:
                self.state = 297
                self.match(PythonParser.COMMA)
                self.state = 298
                self.match(PythonParser.ID)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 304
            self.match(PythonParser.RPAREN)
            self.state = 308
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1:
                self.state = 305
                self.match(PythonParser.INDETACAO)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 311
            self.match(PythonParser.BLOCK)
            self.state = 312
            self.match(PythonParser.LINE_BREAK)
            self.state = 316
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 313
                    self.match(PythonParser.INDETACAO) 
                self.state = 318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 320 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 319
                    self.stat()

                else:
                    raise NoViableAltException(self)
                self.state = 322 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,48,self._ctx)

            self.state = 327
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 324
                    self.match(PythonParser.LINE_BREAK) 
                self.state = 329
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PythonParser.ID, 0)

        def DIGITS(self):
            return self.getToken(PythonParser.DIGITS, 0)

        def FLOAT(self):
            return self.getToken(PythonParser.FLOAT, 0)

        def func(self):
            return self.getTypedRuleContext(PythonParser.FuncContext,0)


        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def LPAREN(self):
            return self.getToken(PythonParser.LPAREN, 0)

        def RPAREN(self):
            return self.getToken(PythonParser.RPAREN, 0)

        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def LPARENREC(self):
            return self.getToken(PythonParser.LPARENREC, 0)

        def RPARENREC(self):
            return self.getToken(PythonParser.RPARENREC, 0)

        def AND(self):
            return self.getToken(PythonParser.AND, 0)

        def ANDSYMBOL(self):
            return self.getToken(PythonParser.ANDSYMBOL, 0)

        def OR(self):
            return self.getToken(PythonParser.OR, 0)

        def ORSYMBOL(self):
            return self.getToken(PythonParser.ORSYMBOL, 0)

        def EQ(self):
            return self.getToken(PythonParser.EQ, 0)

        def LESS(self):
            return self.getToken(PythonParser.LESS, 0)

        def GREATER(self):
            return self.getToken(PythonParser.GREATER, 0)

        def NOTEQUAL(self):
            return self.getToken(PythonParser.NOTEQUAL, 0)

        def LESSEQUAL(self):
            return self.getToken(PythonParser.LESSEQUAL, 0)

        def GREATEREQUAL(self):
            return self.getToken(PythonParser.GREATEREQUAL, 0)

        def ATRIBUI(self):
            return self.getToken(PythonParser.ATRIBUI, 0)

        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def MULT(self):
            return self.getToken(PythonParser.MULT, 0)

        def DIVISION(self):
            return self.getToken(PythonParser.DIVISION, 0)

        def DIVISIONINT(self):
            return self.getToken(PythonParser.DIVISIONINT, 0)

        def RESTO(self):
            return self.getToken(PythonParser.RESTO, 0)

        def PLUSEQUAL(self):
            return self.getToken(PythonParser.PLUSEQUAL, 0)

        def MINUSEQUAL(self):
            return self.getToken(PythonParser.MINUSEQUAL, 0)

        def MULTEQUAL(self):
            return self.getToken(PythonParser.MULTEQUAL, 0)

        def DIVISIONEQUAL(self):
            return self.getToken(PythonParser.DIVISIONEQUAL, 0)

        def DIVISIONINTEQUAL(self):
            return self.getToken(PythonParser.DIVISIONINTEQUAL, 0)

        def EXPEQUAL(self):
            return self.getToken(PythonParser.EXPEQUAL, 0)

        def RESTOEQUAL(self):
            return self.getToken(PythonParser.RESTOEQUAL, 0)

        def EXP(self):
            return self.getToken(PythonParser.EXP, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_expr

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 12
        self.enterRecursionRule(localctx, 12, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 331
                self.match(PythonParser.ID)
                pass

            elif la_ == 2:
                self.state = 332
                self.match(PythonParser.DIGITS)
                pass

            elif la_ == 3:
                self.state = 333
                self.match(PythonParser.FLOAT)
                pass

            elif la_ == 4:
                self.state = 334
                self.func()
                pass

            elif la_ == 5:
                self.state = 335
                self.match(PythonParser.NOT)
                self.state = 336
                self.expr(50)
                pass

            elif la_ == 6:
                self.state = 337
                self.match(PythonParser.LPAREN)
                self.state = 338
                self.expr(0)
                self.state = 339
                self.match(PythonParser.RPAREN)
                pass

            elif la_ == 7:
                self.state = 341
                self.match(PythonParser.LPAREN)
                self.state = 342
                self.expr(0)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 343
                    self.match(PythonParser.INDETACAO)
                    self.state = 344
                    self.expr(0)
                    self.state = 349
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 350
                self.match(PythonParser.RPAREN)
                pass

            elif la_ == 8:
                self.state = 352
                self.match(PythonParser.LPARENREC)
                self.state = 353
                self.expr(0)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 354
                    self.match(PythonParser.INDETACAO)
                    self.state = 355
                    self.expr(0)
                    self.state = 360
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 361
                self.match(PythonParser.RPARENREC)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 552
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,54,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 550
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 365
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 366
                        self.match(PythonParser.INDETACAO)
                        self.state = 367
                        self.match(PythonParser.AND)
                        self.state = 368
                        self.match(PythonParser.INDETACAO)
                        self.state = 369
                        self.expr(49)
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 370
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 371
                        self.match(PythonParser.INDETACAO)
                        self.state = 372
                        self.match(PythonParser.ANDSYMBOL)
                        self.state = 373
                        self.match(PythonParser.INDETACAO)
                        self.state = 374
                        self.expr(48)
                        pass

                    elif la_ == 3:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 375
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 376
                        self.match(PythonParser.INDETACAO)
                        self.state = 377
                        self.match(PythonParser.OR)
                        self.state = 378
                        self.match(PythonParser.INDETACAO)
                        self.state = 379
                        self.expr(47)
                        pass

                    elif la_ == 4:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 380
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 381
                        self.match(PythonParser.INDETACAO)
                        self.state = 382
                        self.match(PythonParser.ORSYMBOL)
                        self.state = 383
                        self.match(PythonParser.INDETACAO)
                        self.state = 384
                        self.expr(46)
                        pass

                    elif la_ == 5:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 385
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 386
                        self.match(PythonParser.ORSYMBOL)
                        self.state = 387
                        self.expr(45)
                        pass

                    elif la_ == 6:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 388
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 389
                        self.match(PythonParser.INDETACAO)
                        self.state = 390
                        self.match(PythonParser.EQ)
                        self.state = 391
                        self.match(PythonParser.INDETACAO)
                        self.state = 392
                        self.expr(44)
                        pass

                    elif la_ == 7:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 393
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 394
                        self.match(PythonParser.EQ)
                        self.state = 395
                        self.expr(43)
                        pass

                    elif la_ == 8:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 396
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 397
                        self.match(PythonParser.INDETACAO)
                        self.state = 398
                        self.match(PythonParser.LESS)
                        self.state = 399
                        self.match(PythonParser.INDETACAO)
                        self.state = 400
                        self.expr(42)
                        pass

                    elif la_ == 9:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 401
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 402
                        self.match(PythonParser.LESS)
                        self.state = 403
                        self.expr(41)
                        pass

                    elif la_ == 10:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 404
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 405
                        self.match(PythonParser.INDETACAO)
                        self.state = 406
                        self.match(PythonParser.GREATER)
                        self.state = 407
                        self.match(PythonParser.INDETACAO)
                        self.state = 408
                        self.expr(40)
                        pass

                    elif la_ == 11:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 409
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 410
                        self.match(PythonParser.GREATER)
                        self.state = 411
                        self.expr(39)
                        pass

                    elif la_ == 12:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 412
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 413
                        self.match(PythonParser.INDETACAO)
                        self.state = 414
                        self.match(PythonParser.NOTEQUAL)
                        self.state = 415
                        self.match(PythonParser.INDETACAO)
                        self.state = 416
                        self.expr(38)
                        pass

                    elif la_ == 13:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 417
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 418
                        self.match(PythonParser.NOTEQUAL)
                        self.state = 419
                        self.expr(37)
                        pass

                    elif la_ == 14:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 420
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 421
                        self.match(PythonParser.INDETACAO)
                        self.state = 422
                        self.match(PythonParser.LESSEQUAL)
                        self.state = 423
                        self.match(PythonParser.INDETACAO)
                        self.state = 424
                        self.expr(36)
                        pass

                    elif la_ == 15:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 425
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 426
                        self.match(PythonParser.LESSEQUAL)
                        self.state = 427
                        self.expr(35)
                        pass

                    elif la_ == 16:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 428
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 429
                        self.match(PythonParser.INDETACAO)
                        self.state = 430
                        self.match(PythonParser.GREATEREQUAL)
                        self.state = 431
                        self.match(PythonParser.INDETACAO)
                        self.state = 432
                        self.expr(34)
                        pass

                    elif la_ == 17:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 433
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 434
                        self.match(PythonParser.GREATEREQUAL)
                        self.state = 435
                        self.expr(33)
                        pass

                    elif la_ == 18:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 436
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 437
                        self.match(PythonParser.INDETACAO)
                        self.state = 438
                        self.match(PythonParser.ATRIBUI)
                        self.state = 439
                        self.match(PythonParser.INDETACAO)
                        self.state = 440
                        self.expr(32)
                        pass

                    elif la_ == 19:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 441
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 442
                        self.match(PythonParser.ATRIBUI)
                        self.state = 443
                        self.expr(31)
                        pass

                    elif la_ == 20:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 444
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 445
                        self.match(PythonParser.INDETACAO)
                        self.state = 446
                        self.match(PythonParser.PLUS)
                        self.state = 447
                        self.match(PythonParser.INDETACAO)
                        self.state = 448
                        self.expr(30)
                        pass

                    elif la_ == 21:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 449
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 450
                        self.match(PythonParser.PLUS)
                        self.state = 451
                        self.expr(29)
                        pass

                    elif la_ == 22:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 452
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 453
                        self.match(PythonParser.INDETACAO)
                        self.state = 454
                        self.match(PythonParser.MINUS)
                        self.state = 455
                        self.match(PythonParser.INDETACAO)
                        self.state = 456
                        self.expr(28)
                        pass

                    elif la_ == 23:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 457
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 458
                        self.match(PythonParser.MINUS)
                        self.state = 459
                        self.expr(27)
                        pass

                    elif la_ == 24:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 460
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 461
                        self.match(PythonParser.INDETACAO)
                        self.state = 462
                        self.match(PythonParser.MULT)
                        self.state = 463
                        self.match(PythonParser.INDETACAO)
                        self.state = 464
                        self.expr(26)
                        pass

                    elif la_ == 25:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 465
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 466
                        self.match(PythonParser.MULT)
                        self.state = 467
                        self.expr(25)
                        pass

                    elif la_ == 26:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 468
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 469
                        self.match(PythonParser.INDETACAO)
                        self.state = 470
                        self.match(PythonParser.DIVISION)
                        self.state = 471
                        self.match(PythonParser.INDETACAO)
                        self.state = 472
                        self.expr(24)
                        pass

                    elif la_ == 27:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 473
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 474
                        self.match(PythonParser.DIVISION)
                        self.state = 475
                        self.expr(23)
                        pass

                    elif la_ == 28:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 476
                        if not self.precpred(self._ctx, 21):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 21)")
                        self.state = 477
                        self.match(PythonParser.INDETACAO)
                        self.state = 478
                        self.match(PythonParser.DIVISIONINT)
                        self.state = 479
                        self.match(PythonParser.INDETACAO)
                        self.state = 480
                        self.expr(22)
                        pass

                    elif la_ == 29:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 481
                        if not self.precpred(self._ctx, 20):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 20)")
                        self.state = 482
                        self.match(PythonParser.DIVISIONINT)
                        self.state = 483
                        self.expr(21)
                        pass

                    elif la_ == 30:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 484
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 485
                        self.match(PythonParser.INDETACAO)
                        self.state = 486
                        self.match(PythonParser.RESTO)
                        self.state = 487
                        self.match(PythonParser.INDETACAO)
                        self.state = 488
                        self.expr(19)
                        pass

                    elif la_ == 31:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 489
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 490
                        self.match(PythonParser.RESTO)
                        self.state = 491
                        self.expr(18)
                        pass

                    elif la_ == 32:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 492
                        if not self.precpred(self._ctx, 16):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 16)")
                        self.state = 493
                        self.match(PythonParser.INDETACAO)
                        self.state = 494
                        self.match(PythonParser.PLUSEQUAL)
                        self.state = 495
                        self.match(PythonParser.INDETACAO)
                        self.state = 496
                        self.expr(17)
                        pass

                    elif la_ == 33:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 497
                        if not self.precpred(self._ctx, 15):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 15)")
                        self.state = 498
                        self.match(PythonParser.PLUSEQUAL)
                        self.state = 499
                        self.expr(16)
                        pass

                    elif la_ == 34:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 500
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 501
                        self.match(PythonParser.INDETACAO)
                        self.state = 502
                        self.match(PythonParser.MINUSEQUAL)
                        self.state = 503
                        self.match(PythonParser.INDETACAO)
                        self.state = 504
                        self.expr(15)
                        pass

                    elif la_ == 35:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 505
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 506
                        self.match(PythonParser.MINUSEQUAL)
                        self.state = 507
                        self.expr(14)
                        pass

                    elif la_ == 36:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 508
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 509
                        self.match(PythonParser.INDETACAO)
                        self.state = 510
                        self.match(PythonParser.MULTEQUAL)
                        self.state = 511
                        self.match(PythonParser.INDETACAO)
                        self.state = 512
                        self.expr(13)
                        pass

                    elif la_ == 37:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 513
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 514
                        self.match(PythonParser.MULTEQUAL)
                        self.state = 515
                        self.expr(12)
                        pass

                    elif la_ == 38:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 516
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 517
                        self.match(PythonParser.INDETACAO)
                        self.state = 518
                        self.match(PythonParser.DIVISIONEQUAL)
                        self.state = 519
                        self.match(PythonParser.INDETACAO)
                        self.state = 520
                        self.expr(11)
                        pass

                    elif la_ == 39:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 521
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 522
                        self.match(PythonParser.DIVISIONEQUAL)
                        self.state = 523
                        self.expr(10)
                        pass

                    elif la_ == 40:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 524
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 525
                        self.match(PythonParser.INDETACAO)
                        self.state = 526
                        self.match(PythonParser.DIVISIONINTEQUAL)
                        self.state = 527
                        self.match(PythonParser.INDETACAO)
                        self.state = 528
                        self.expr(9)
                        pass

                    elif la_ == 41:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 529
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 530
                        self.match(PythonParser.DIVISIONINTEQUAL)
                        self.state = 531
                        self.expr(8)
                        pass

                    elif la_ == 42:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 532
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 533
                        self.match(PythonParser.INDETACAO)
                        self.state = 534
                        self.match(PythonParser.EXPEQUAL)
                        self.state = 535
                        self.match(PythonParser.INDETACAO)
                        self.state = 536
                        self.expr(7)
                        pass

                    elif la_ == 43:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 537
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 538
                        self.match(PythonParser.EXPEQUAL)
                        self.state = 539
                        self.expr(6)
                        pass

                    elif la_ == 44:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 540
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 541
                        self.match(PythonParser.INDETACAO)
                        self.state = 542
                        self.match(PythonParser.RESTOEQUAL)
                        self.state = 543
                        self.match(PythonParser.INDETACAO)
                        self.state = 544
                        self.expr(5)
                        pass

                    elif la_ == 45:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 545
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 546
                        self.match(PythonParser.RESTOEQUAL)
                        self.state = 547
                        self.expr(4)
                        pass

                    elif la_ == 46:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 548
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 549
                        self.match(PythonParser.EXP)
                        pass

             
                self.state = 554
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,54,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class QueryContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BOOL(self):
            return self.getToken(PythonParser.BOOL, 0)

        def LPAREN(self):
            return self.getToken(PythonParser.LPAREN, 0)

        def query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.QueryContext)
            else:
                return self.getTypedRuleContext(PythonParser.QueryContext,i)


        def RPAREN(self):
            return self.getToken(PythonParser.RPAREN, 0)

        def INDETACAO(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.INDETACAO)
            else:
                return self.getToken(PythonParser.INDETACAO, i)

        def LPARENREC(self):
            return self.getToken(PythonParser.LPARENREC, 0)

        def RPARENREC(self):
            return self.getToken(PythonParser.RPARENREC, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def AND(self):
            return self.getToken(PythonParser.AND, 0)

        def ANDSYMBOL(self):
            return self.getToken(PythonParser.ANDSYMBOL, 0)

        def OR(self):
            return self.getToken(PythonParser.OR, 0)

        def ORSYMBOL(self):
            return self.getToken(PythonParser.ORSYMBOL, 0)

        def EQ(self):
            return self.getToken(PythonParser.EQ, 0)

        def LESS(self):
            return self.getToken(PythonParser.LESS, 0)

        def GREATER(self):
            return self.getToken(PythonParser.GREATER, 0)

        def NOTEQUAL(self):
            return self.getToken(PythonParser.NOTEQUAL, 0)

        def LESSEQUAL(self):
            return self.getToken(PythonParser.LESSEQUAL, 0)

        def GREATEREQUAL(self):
            return self.getToken(PythonParser.GREATEREQUAL, 0)

        def ATRIBUI(self):
            return self.getToken(PythonParser.ATRIBUI, 0)

        def PLUS(self):
            return self.getToken(PythonParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def MULT(self):
            return self.getToken(PythonParser.MULT, 0)

        def DIVISION(self):
            return self.getToken(PythonParser.DIVISION, 0)

        def DIVISIONINT(self):
            return self.getToken(PythonParser.DIVISIONINT, 0)

        def RESTO(self):
            return self.getToken(PythonParser.RESTO, 0)

        def PLUSEQUAL(self):
            return self.getToken(PythonParser.PLUSEQUAL, 0)

        def MINUSEQUAL(self):
            return self.getToken(PythonParser.MINUSEQUAL, 0)

        def MULTEQUAL(self):
            return self.getToken(PythonParser.MULTEQUAL, 0)

        def DIVISIONEQUAL(self):
            return self.getToken(PythonParser.DIVISIONEQUAL, 0)

        def DIVISIONINTEQUAL(self):
            return self.getToken(PythonParser.DIVISIONINTEQUAL, 0)

        def EXPEQUAL(self):
            return self.getToken(PythonParser.EXPEQUAL, 0)

        def RESTOEQUAL(self):
            return self.getToken(PythonParser.RESTOEQUAL, 0)

        def EXP(self):
            return self.getToken(PythonParser.EXP, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_query

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuery" ):
                return visitor.visitQuery(self)
            else:
                return visitor.visitChildren(self)



    def query(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.QueryContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_query, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 556
                self.match(PythonParser.BOOL)
                pass

            elif la_ == 2:
                self.state = 557
                self.match(PythonParser.LPAREN)
                self.state = 558
                self.query(0)
                self.state = 559
                self.match(PythonParser.RPAREN)
                pass

            elif la_ == 3:
                self.state = 561
                self.match(PythonParser.LPAREN)
                self.state = 562
                self.query(0)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 563
                    self.match(PythonParser.INDETACAO)
                    self.state = 564
                    self.query(0)
                    self.state = 569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 570
                self.match(PythonParser.RPAREN)
                pass

            elif la_ == 4:
                self.state = 572
                self.match(PythonParser.LPARENREC)
                self.state = 573
                self.query(0)
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1:
                    self.state = 574
                    self.match(PythonParser.INDETACAO)
                    self.state = 575
                    self.query(0)
                    self.state = 580
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 581
                self.match(PythonParser.RPARENREC)
                pass

            elif la_ == 5:
                self.state = 583
                self.expr(0)
                self.state = 584
                self.match(PythonParser.INDETACAO)
                self.state = 585
                self.match(PythonParser.AND)
                self.state = 586
                self.match(PythonParser.INDETACAO)
                self.state = 587
                self.expr(0)
                pass

            elif la_ == 6:
                self.state = 589
                self.expr(0)
                self.state = 590
                self.match(PythonParser.INDETACAO)
                self.state = 591
                self.match(PythonParser.ANDSYMBOL)
                self.state = 592
                self.match(PythonParser.INDETACAO)
                self.state = 593
                self.expr(0)
                pass

            elif la_ == 7:
                self.state = 595
                self.expr(0)
                self.state = 596
                self.match(PythonParser.INDETACAO)
                self.state = 597
                self.match(PythonParser.OR)
                self.state = 598
                self.match(PythonParser.INDETACAO)
                self.state = 599
                self.expr(0)
                pass

            elif la_ == 8:
                self.state = 601
                self.expr(0)
                self.state = 602
                self.match(PythonParser.INDETACAO)
                self.state = 603
                self.match(PythonParser.ORSYMBOL)
                self.state = 604
                self.match(PythonParser.INDETACAO)
                self.state = 605
                self.expr(0)
                pass

            elif la_ == 9:
                self.state = 607
                self.expr(0)
                self.state = 608
                self.match(PythonParser.ORSYMBOL)
                self.state = 609
                self.expr(0)
                pass

            elif la_ == 10:
                self.state = 611
                self.expr(0)
                self.state = 612
                self.match(PythonParser.INDETACAO)
                self.state = 613
                self.match(PythonParser.EQ)
                self.state = 614
                self.match(PythonParser.INDETACAO)
                self.state = 615
                self.expr(0)
                pass

            elif la_ == 11:
                self.state = 617
                self.expr(0)
                self.state = 618
                self.match(PythonParser.EQ)
                self.state = 619
                self.expr(0)
                pass

            elif la_ == 12:
                self.state = 621
                self.expr(0)
                self.state = 622
                self.match(PythonParser.INDETACAO)
                self.state = 623
                self.match(PythonParser.LESS)
                self.state = 624
                self.match(PythonParser.INDETACAO)
                self.state = 625
                self.expr(0)
                pass

            elif la_ == 13:
                self.state = 627
                self.expr(0)
                self.state = 628
                self.match(PythonParser.LESS)
                self.state = 629
                self.expr(0)
                pass

            elif la_ == 14:
                self.state = 631
                self.expr(0)
                self.state = 632
                self.match(PythonParser.INDETACAO)
                self.state = 633
                self.match(PythonParser.GREATER)
                self.state = 634
                self.match(PythonParser.INDETACAO)
                self.state = 635
                self.expr(0)
                pass

            elif la_ == 15:
                self.state = 637
                self.expr(0)
                self.state = 638
                self.match(PythonParser.GREATER)
                self.state = 639
                self.expr(0)
                pass

            elif la_ == 16:
                self.state = 641
                self.expr(0)
                self.state = 642
                self.match(PythonParser.INDETACAO)
                self.state = 643
                self.match(PythonParser.NOTEQUAL)
                self.state = 644
                self.match(PythonParser.INDETACAO)
                self.state = 645
                self.expr(0)
                pass

            elif la_ == 17:
                self.state = 647
                self.expr(0)
                self.state = 648
                self.match(PythonParser.NOTEQUAL)
                self.state = 649
                self.expr(0)
                pass

            elif la_ == 18:
                self.state = 651
                self.expr(0)
                self.state = 652
                self.match(PythonParser.INDETACAO)
                self.state = 653
                self.match(PythonParser.LESSEQUAL)
                self.state = 654
                self.match(PythonParser.INDETACAO)
                self.state = 655
                self.expr(0)
                pass

            elif la_ == 19:
                self.state = 657
                self.expr(0)
                self.state = 658
                self.match(PythonParser.LESSEQUAL)
                self.state = 659
                self.expr(0)
                pass

            elif la_ == 20:
                self.state = 661
                self.expr(0)
                self.state = 662
                self.match(PythonParser.INDETACAO)
                self.state = 663
                self.match(PythonParser.GREATEREQUAL)
                self.state = 664
                self.match(PythonParser.INDETACAO)
                self.state = 665
                self.expr(0)
                pass

            elif la_ == 21:
                self.state = 667
                self.expr(0)
                self.state = 668
                self.match(PythonParser.GREATEREQUAL)
                self.state = 669
                self.expr(0)
                pass

            elif la_ == 22:
                self.state = 671
                self.expr(0)
                self.state = 672
                self.match(PythonParser.INDETACAO)
                self.state = 673
                self.match(PythonParser.ATRIBUI)
                self.state = 674
                self.match(PythonParser.INDETACAO)
                self.state = 675
                self.expr(0)
                pass

            elif la_ == 23:
                self.state = 677
                self.expr(0)
                self.state = 678
                self.match(PythonParser.ATRIBUI)
                self.state = 679
                self.expr(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 854
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 852
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 683
                        if not self.precpred(self._ctx, 63):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 63)")
                        self.state = 684
                        self.match(PythonParser.INDETACAO)
                        self.state = 685
                        self.match(PythonParser.AND)
                        self.state = 686
                        self.match(PythonParser.INDETACAO)
                        self.state = 687
                        self.query(64)
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 688
                        if not self.precpred(self._ctx, 62):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 62)")
                        self.state = 689
                        self.match(PythonParser.INDETACAO)
                        self.state = 690
                        self.match(PythonParser.ANDSYMBOL)
                        self.state = 691
                        self.match(PythonParser.INDETACAO)
                        self.state = 692
                        self.query(63)
                        pass

                    elif la_ == 3:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 693
                        if not self.precpred(self._ctx, 61):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 61)")
                        self.state = 694
                        self.match(PythonParser.INDETACAO)
                        self.state = 695
                        self.match(PythonParser.OR)
                        self.state = 696
                        self.match(PythonParser.INDETACAO)
                        self.state = 697
                        self.query(62)
                        pass

                    elif la_ == 4:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 698
                        if not self.precpred(self._ctx, 60):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 60)")
                        self.state = 699
                        self.match(PythonParser.INDETACAO)
                        self.state = 700
                        self.match(PythonParser.ORSYMBOL)
                        self.state = 701
                        self.match(PythonParser.INDETACAO)
                        self.state = 702
                        self.query(61)
                        pass

                    elif la_ == 5:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 703
                        if not self.precpred(self._ctx, 59):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 59)")
                        self.state = 704
                        self.match(PythonParser.ORSYMBOL)
                        self.state = 705
                        self.query(60)
                        pass

                    elif la_ == 6:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 706
                        if not self.precpred(self._ctx, 58):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 58)")
                        self.state = 707
                        self.match(PythonParser.INDETACAO)
                        self.state = 708
                        self.match(PythonParser.EQ)
                        self.state = 709
                        self.match(PythonParser.INDETACAO)
                        self.state = 710
                        self.query(59)
                        pass

                    elif la_ == 7:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 711
                        if not self.precpred(self._ctx, 57):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 57)")
                        self.state = 712
                        self.match(PythonParser.EQ)
                        self.state = 713
                        self.query(58)
                        pass

                    elif la_ == 8:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 714
                        if not self.precpred(self._ctx, 56):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 56)")
                        self.state = 715
                        self.match(PythonParser.INDETACAO)
                        self.state = 716
                        self.match(PythonParser.PLUS)
                        self.state = 717
                        self.match(PythonParser.INDETACAO)
                        self.state = 718
                        self.query(57)
                        pass

                    elif la_ == 9:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 719
                        if not self.precpred(self._ctx, 55):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 55)")
                        self.state = 720
                        self.match(PythonParser.PLUS)
                        self.state = 721
                        self.query(56)
                        pass

                    elif la_ == 10:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 722
                        if not self.precpred(self._ctx, 54):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 54)")
                        self.state = 723
                        self.match(PythonParser.INDETACAO)
                        self.state = 724
                        self.match(PythonParser.MINUS)
                        self.state = 725
                        self.match(PythonParser.INDETACAO)
                        self.state = 726
                        self.query(55)
                        pass

                    elif la_ == 11:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 727
                        if not self.precpred(self._ctx, 53):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 53)")
                        self.state = 728
                        self.match(PythonParser.MINUS)
                        self.state = 729
                        self.query(54)
                        pass

                    elif la_ == 12:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 730
                        if not self.precpred(self._ctx, 52):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 52)")
                        self.state = 731
                        self.match(PythonParser.INDETACAO)
                        self.state = 732
                        self.match(PythonParser.MULT)
                        self.state = 733
                        self.match(PythonParser.INDETACAO)
                        self.state = 734
                        self.query(53)
                        pass

                    elif la_ == 13:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 735
                        if not self.precpred(self._ctx, 51):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 51)")
                        self.state = 736
                        self.match(PythonParser.MULT)
                        self.state = 737
                        self.query(52)
                        pass

                    elif la_ == 14:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 738
                        if not self.precpred(self._ctx, 50):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 50)")
                        self.state = 739
                        self.match(PythonParser.INDETACAO)
                        self.state = 740
                        self.match(PythonParser.DIVISION)
                        self.state = 741
                        self.match(PythonParser.INDETACAO)
                        self.state = 742
                        self.query(51)
                        pass

                    elif la_ == 15:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 743
                        if not self.precpred(self._ctx, 49):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 49)")
                        self.state = 744
                        self.match(PythonParser.DIVISION)
                        self.state = 745
                        self.query(50)
                        pass

                    elif la_ == 16:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 746
                        if not self.precpred(self._ctx, 48):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 48)")
                        self.state = 747
                        self.match(PythonParser.INDETACAO)
                        self.state = 748
                        self.match(PythonParser.DIVISIONINT)
                        self.state = 749
                        self.match(PythonParser.INDETACAO)
                        self.state = 750
                        self.query(49)
                        pass

                    elif la_ == 17:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 751
                        if not self.precpred(self._ctx, 47):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 47)")
                        self.state = 752
                        self.match(PythonParser.DIVISIONINT)
                        self.state = 753
                        self.query(48)
                        pass

                    elif la_ == 18:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 754
                        if not self.precpred(self._ctx, 45):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 45)")
                        self.state = 755
                        self.match(PythonParser.INDETACAO)
                        self.state = 756
                        self.match(PythonParser.RESTO)
                        self.state = 757
                        self.match(PythonParser.INDETACAO)
                        self.state = 758
                        self.query(46)
                        pass

                    elif la_ == 19:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 759
                        if not self.precpred(self._ctx, 44):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 44)")
                        self.state = 760
                        self.match(PythonParser.RESTO)
                        self.state = 761
                        self.query(45)
                        pass

                    elif la_ == 20:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 762
                        if not self.precpred(self._ctx, 43):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 43)")
                        self.state = 763
                        self.match(PythonParser.INDETACAO)
                        self.state = 764
                        self.match(PythonParser.ATRIBUI)
                        self.state = 765
                        self.match(PythonParser.INDETACAO)
                        self.state = 766
                        self.query(44)
                        pass

                    elif la_ == 21:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 767
                        if not self.precpred(self._ctx, 42):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 42)")
                        self.state = 768
                        self.match(PythonParser.ATRIBUI)
                        self.state = 769
                        self.query(43)
                        pass

                    elif la_ == 22:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 770
                        if not self.precpred(self._ctx, 41):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 41)")
                        self.state = 771
                        self.match(PythonParser.INDETACAO)
                        self.state = 772
                        self.match(PythonParser.LESS)
                        self.state = 773
                        self.match(PythonParser.INDETACAO)
                        self.state = 774
                        self.query(42)
                        pass

                    elif la_ == 23:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 775
                        if not self.precpred(self._ctx, 40):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 40)")
                        self.state = 776
                        self.match(PythonParser.LESS)
                        self.state = 777
                        self.query(41)
                        pass

                    elif la_ == 24:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 778
                        if not self.precpred(self._ctx, 39):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 39)")
                        self.state = 779
                        self.match(PythonParser.INDETACAO)
                        self.state = 780
                        self.match(PythonParser.GREATER)
                        self.state = 781
                        self.match(PythonParser.INDETACAO)
                        self.state = 782
                        self.query(40)
                        pass

                    elif la_ == 25:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 783
                        if not self.precpred(self._ctx, 38):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 38)")
                        self.state = 784
                        self.match(PythonParser.GREATER)
                        self.state = 785
                        self.query(39)
                        pass

                    elif la_ == 26:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 786
                        if not self.precpred(self._ctx, 37):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 37)")
                        self.state = 787
                        self.match(PythonParser.INDETACAO)
                        self.state = 788
                        self.match(PythonParser.NOTEQUAL)
                        self.state = 789
                        self.match(PythonParser.INDETACAO)
                        self.state = 790
                        self.query(38)
                        pass

                    elif la_ == 27:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 791
                        if not self.precpred(self._ctx, 36):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 36)")
                        self.state = 792
                        self.match(PythonParser.NOTEQUAL)
                        self.state = 793
                        self.query(37)
                        pass

                    elif la_ == 28:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 794
                        if not self.precpred(self._ctx, 35):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 35)")
                        self.state = 795
                        self.match(PythonParser.INDETACAO)
                        self.state = 796
                        self.match(PythonParser.PLUSEQUAL)
                        self.state = 797
                        self.match(PythonParser.INDETACAO)
                        self.state = 798
                        self.query(36)
                        pass

                    elif la_ == 29:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 799
                        if not self.precpred(self._ctx, 34):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 34)")
                        self.state = 800
                        self.match(PythonParser.PLUSEQUAL)
                        self.state = 801
                        self.query(35)
                        pass

                    elif la_ == 30:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 802
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 803
                        self.match(PythonParser.INDETACAO)
                        self.state = 804
                        self.match(PythonParser.MINUSEQUAL)
                        self.state = 805
                        self.match(PythonParser.INDETACAO)
                        self.state = 806
                        self.query(34)
                        pass

                    elif la_ == 31:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 807
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 808
                        self.match(PythonParser.MINUSEQUAL)
                        self.state = 809
                        self.query(33)
                        pass

                    elif la_ == 32:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 810
                        if not self.precpred(self._ctx, 31):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 31)")
                        self.state = 811
                        self.match(PythonParser.INDETACAO)
                        self.state = 812
                        self.match(PythonParser.MULTEQUAL)
                        self.state = 813
                        self.match(PythonParser.INDETACAO)
                        self.state = 814
                        self.query(32)
                        pass

                    elif la_ == 33:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 815
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 816
                        self.match(PythonParser.MULTEQUAL)
                        self.state = 817
                        self.query(31)
                        pass

                    elif la_ == 34:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 818
                        if not self.precpred(self._ctx, 29):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 29)")
                        self.state = 819
                        self.match(PythonParser.INDETACAO)
                        self.state = 820
                        self.match(PythonParser.DIVISIONEQUAL)
                        self.state = 821
                        self.match(PythonParser.INDETACAO)
                        self.state = 822
                        self.query(30)
                        pass

                    elif la_ == 35:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 823
                        if not self.precpred(self._ctx, 28):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 28)")
                        self.state = 824
                        self.match(PythonParser.DIVISIONEQUAL)
                        self.state = 825
                        self.query(29)
                        pass

                    elif la_ == 36:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 826
                        if not self.precpred(self._ctx, 27):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 27)")
                        self.state = 827
                        self.match(PythonParser.INDETACAO)
                        self.state = 828
                        self.match(PythonParser.DIVISIONINTEQUAL)
                        self.state = 829
                        self.match(PythonParser.INDETACAO)
                        self.state = 830
                        self.query(28)
                        pass

                    elif la_ == 37:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 831
                        if not self.precpred(self._ctx, 26):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 26)")
                        self.state = 832
                        self.match(PythonParser.DIVISIONINTEQUAL)
                        self.state = 833
                        self.query(27)
                        pass

                    elif la_ == 38:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 834
                        if not self.precpred(self._ctx, 25):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 25)")
                        self.state = 835
                        self.match(PythonParser.INDETACAO)
                        self.state = 836
                        self.match(PythonParser.EXPEQUAL)
                        self.state = 837
                        self.match(PythonParser.INDETACAO)
                        self.state = 838
                        self.query(26)
                        pass

                    elif la_ == 39:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 839
                        if not self.precpred(self._ctx, 24):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 24)")
                        self.state = 840
                        self.match(PythonParser.EXPEQUAL)
                        self.state = 841
                        self.query(25)
                        pass

                    elif la_ == 40:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 842
                        if not self.precpred(self._ctx, 23):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 23)")
                        self.state = 843
                        self.match(PythonParser.INDETACAO)
                        self.state = 844
                        self.match(PythonParser.RESTOEQUAL)
                        self.state = 845
                        self.match(PythonParser.INDETACAO)
                        self.state = 846
                        self.query(24)
                        pass

                    elif la_ == 41:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 847
                        if not self.precpred(self._ctx, 22):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 22)")
                        self.state = 848
                        self.match(PythonParser.RESTOEQUAL)
                        self.state = 849
                        self.query(23)
                        pass

                    elif la_ == 42:
                        localctx = PythonParser.QueryContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_query)
                        self.state = 850
                        if not self.precpred(self._ctx, 46):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 46)")
                        self.state = 851
                        self.match(PythonParser.EXP)
                        pass

             
                self.state = 856
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class FuncContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(PythonParser.ID, 0)

        def LPAREN(self):
            return self.getToken(PythonParser.LPAREN, 0)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def RPAREN(self):
            return self.getToken(PythonParser.RPAREN, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def query(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.QueryContext)
            else:
                return self.getTypedRuleContext(PythonParser.QueryContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_func

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunc" ):
                return visitor.visitFunc(self)
            else:
                return visitor.visitChildren(self)




    def func(self):

        localctx = PythonParser.FuncContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_func)
        self._la = 0 # Token type
        try:
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 857
                self.match(PythonParser.ID)
                self.state = 858
                self.match(PythonParser.LPAREN)
                self.state = 859
                self.expr(0)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 860
                    self.match(PythonParser.COMMA)
                    self.state = 861
                    self.expr(0)
                    self.state = 866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 867
                self.match(PythonParser.RPAREN)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 869
                self.match(PythonParser.ID)
                self.state = 870
                self.match(PythonParser.LPAREN)
                self.state = 871
                self.query(0)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==9:
                    self.state = 872
                    self.match(PythonParser.COMMA)
                    self.state = 873
                    self.query(0)
                    self.state = 878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 879
                self.match(PythonParser.RPAREN)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[4] = self.condicional_sempred
        self._predicates[6] = self.expr_sempred
        self._predicates[7] = self.query_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def condicional_sempred(self, localctx:CondicionalContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 46)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 20:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 21:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 21)
         

            if predIndex == 30:
                return self.precpred(self._ctx, 20)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 16)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 15)
         

            if predIndex == 35:
                return self.precpred(self._ctx, 14)
         

            if predIndex == 36:
                return self.precpred(self._ctx, 13)
         

            if predIndex == 37:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 38:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 39:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 41:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 42:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 43:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 45:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 47:
                return self.precpred(self._ctx, 19)
         

    def query_sempred(self, localctx:QueryContext, predIndex:int):
            if predIndex == 48:
                return self.precpred(self._ctx, 63)
         

            if predIndex == 49:
                return self.precpred(self._ctx, 62)
         

            if predIndex == 50:
                return self.precpred(self._ctx, 61)
         

            if predIndex == 51:
                return self.precpred(self._ctx, 60)
         

            if predIndex == 52:
                return self.precpred(self._ctx, 59)
         

            if predIndex == 53:
                return self.precpred(self._ctx, 58)
         

            if predIndex == 54:
                return self.precpred(self._ctx, 57)
         

            if predIndex == 55:
                return self.precpred(self._ctx, 56)
         

            if predIndex == 56:
                return self.precpred(self._ctx, 55)
         

            if predIndex == 57:
                return self.precpred(self._ctx, 54)
         

            if predIndex == 58:
                return self.precpred(self._ctx, 53)
         

            if predIndex == 59:
                return self.precpred(self._ctx, 52)
         

            if predIndex == 60:
                return self.precpred(self._ctx, 51)
         

            if predIndex == 61:
                return self.precpred(self._ctx, 50)
         

            if predIndex == 62:
                return self.precpred(self._ctx, 49)
         

            if predIndex == 63:
                return self.precpred(self._ctx, 48)
         

            if predIndex == 64:
                return self.precpred(self._ctx, 47)
         

            if predIndex == 65:
                return self.precpred(self._ctx, 45)
         

            if predIndex == 66:
                return self.precpred(self._ctx, 44)
         

            if predIndex == 67:
                return self.precpred(self._ctx, 43)
         

            if predIndex == 68:
                return self.precpred(self._ctx, 42)
         

            if predIndex == 69:
                return self.precpred(self._ctx, 41)
         

            if predIndex == 70:
                return self.precpred(self._ctx, 40)
         

            if predIndex == 71:
                return self.precpred(self._ctx, 39)
         

            if predIndex == 72:
                return self.precpred(self._ctx, 38)
         

            if predIndex == 73:
                return self.precpred(self._ctx, 37)
         

            if predIndex == 74:
                return self.precpred(self._ctx, 36)
         

            if predIndex == 75:
                return self.precpred(self._ctx, 35)
         

            if predIndex == 76:
                return self.precpred(self._ctx, 34)
         

            if predIndex == 77:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 78:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 79:
                return self.precpred(self._ctx, 31)
         

            if predIndex == 80:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 81:
                return self.precpred(self._ctx, 29)
         

            if predIndex == 82:
                return self.precpred(self._ctx, 28)
         

            if predIndex == 83:
                return self.precpred(self._ctx, 27)
         

            if predIndex == 84:
                return self.precpred(self._ctx, 26)
         

            if predIndex == 85:
                return self.precpred(self._ctx, 25)
         

            if predIndex == 86:
                return self.precpred(self._ctx, 24)
         

            if predIndex == 87:
                return self.precpred(self._ctx, 23)
         

            if predIndex == 88:
                return self.precpred(self._ctx, 22)
         

            if predIndex == 89:
                return self.precpred(self._ctx, 46)
         




